parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    //import java.lang;
    import fr.ensimag.deca.tree.*;
    import fr.ensimag.deca.*;
    import java.io.PrintStream;
    import java.util.Iterator;
    import fr.ensimag.deca.context.*;
    import fr.ensimag.deca.tools.SymbolTable;

}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
}

prog returns[AbstractProgram tree]

    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        
            // setLocation($decls,$list_decl.start);
            // setLocation($insts,$list_inst.start);

        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
            
        }
    : decl_var_set[$tree]*
    {
    }
    ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI
    
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        $l.add($dv1.tree);

        } (COMMA dv2=decl_var[$t] {
            $l.add($dv2.tree);
            

        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
            
        }
    : i=ident {
            NoInitialization init1 = new NoInitialization();
            assert(init1 != null);
            assert($i.tree != null);
            
            $tree = new DeclVar($t,$i.tree, init1);
            setLocation($tree,$i.start);
        }
      (EQUALS e=expr {
            Initialization init = new Initialization($e.tree);
            assert(init != null);
            assert($i.tree != null);
            
            $tree = new DeclVar($t,$i.tree, init);

            assert($tree != null);
            setLocation(init, $EQUALS);
            setLocation($tree,$i.start);
            //setLocation($tree,$EQUALS);
            
        }
      )? {
        
        }
    ;

list_inst returns[ListInst tree]
@init { 
   
    
    $tree = new ListInst();
    assert($tree != null);
}
    : (inst { 
            assert($inst.tree != null);
            $tree.add($inst.tree);

        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree;


        }
    | SEMI { 
        NoOperation tree;
        $tree = new NoOperation();
        setLocation($tree,$SEMI);
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            Print tree;
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $PRINT);

        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            Println tree;
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $PRINTLN);

        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            Print tree;
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $PRINTX);
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            Println tree;
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $PRINTLNX);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
            setLocation($tree, $if_then_else.start);
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            While tree;
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $WHILE);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree);
            setLocation($tree, $RETURN);
        }
    ;


if_then_else returns[IfThenElse tree]
@init {
    ListInst elseBranch = new ListInst();
    IfThenElse elseIf;
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
        
        $tree = new IfThenElse($condition.tree, $li_if.tree, elseBranch );
        setLocation($tree, $if1);
        
        
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
        // pour Ã©viter un enchainnement circulaire
        ListInst thenBranch = new ListInst();
        elseIf = new IfThenElse($elsif_cond.tree, $elsif_li.tree, thenBranch);
        setLocation(elseIf, $elsif);
        elseBranch.add(elseIf);
        elseBranch = thenBranch;
        
        
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE { 
        Iterator<AbstractInst> iterator = $li_else.tree.iterator();

        while(iterator.hasNext())
        {   
            elseBranch.add(iterator.next());
        }
        
        
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   {
            $tree = new ListExpr();
            assert($tree != null);
        }
    : (e1=expr {
            assert($e1.tree != null);
            $tree.add($e1.tree);

        }
       (COMMA e2=expr {
            assert($e2.tree != null);
            $tree.add($e2.tree);
            

        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            } 
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
  
            $tree = new Assign((AbstractLValue)$e.tree, $e2.tree);
            setLocation($tree, $EQUALS);
        
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
            

        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            
            $tree = new Or($e1.tree,$e2.tree);
            setLocation($tree, $OR);
            
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            And tree;
            $tree = new And($e1.tree,$e2.tree);
            setLocation($tree, $AND);
            
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            Equals tree;
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $EQEQ);
            
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            NotEquals tree;
            $tree = new NotEquals($e1.tree,$e2.tree);
            setLocation($tree, $NEQ);
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            LowerOrEqual tree;
            $tree = new LowerOrEqual($e1.tree,$e2.tree);
            setLocation($tree, $LEQ);
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            GreaterOrEqual tree;
            $tree = new GreaterOrEqual($e1.tree,$e2.tree);
            setLocation($tree, $GEQ);

        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            Greater tree;
            $tree = new Greater($e1.tree,$e2.tree);
            setLocation($tree, $GT);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            Lower tree;
            $tree = new Lower($e1.tree,$e2.tree);
            setLocation($tree, $LT);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);

            $tree = new InstanceOf($e1.tree, $type.tree);
            setLocation($tree, $INSTANCEOF);
            

        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;
          
            
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            Plus tree;
            $tree = new Plus($e1.tree,$e2.tree);
            setLocation($tree, $PLUS);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            Minus tree;
            $tree = new Minus($e1.tree,$e2.tree);
            setLocation($tree, $MINUS);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            //setLocation($tree, $e.start);
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            Multiply tree;
            $tree = new Multiply($e1.tree,$e2.tree);
            setLocation($tree, $TIMES);
            
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            Divide tree;
            $tree = new Divide($e1.tree,$e2.tree);
            setLocation($tree, $SLASH);

        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            Modulo tree;
            $tree = new Modulo($e1.tree,$e2.tree);
            setLocation($tree, $PERCENT);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            UnaryMinus tree;
            $tree = new UnaryMinus($e.tree);
            
            setLocation($tree, $e.start);

        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
          
            $tree = new Not($e.tree);
            
            setLocation($tree, $op);

        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
            
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
           
        }
    | e1=select_expr DOT i=ident {
            assert($e1.tree != null);
            assert($i.tree != null);


        }
        (o=OPARENT args=list_expr CPARENT {
            
            assert($args.tree != null);  
             
            $tree = new MethodCall($e1.tree, $i.tree, $args.tree);
            setLocation($tree, $o);
        }
        | /* epsilon */ {
            
            $tree = new Selection($i.tree, $e1.tree);
            setLocation($tree, $DOT);

        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);      
            $tree = new MethodCall($m.tree, $args.tree);
            setLocation($tree, $m.start);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
            
        }
    | READINT OPARENT CPARENT {
        ReadInt tree;
        $tree = new ReadInt();
        setLocation($tree, $READINT);
        }
    | READFLOAT OPARENT CPARENT {
        ReadFloat tree;
        $tree = new ReadFloat();
        setLocation($tree, $READFLOAT);
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree ) ;

            setLocation($tree, $NEW);

        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new Cast($type.tree, $expr.tree);
            setLocation($tree, $cast);
            

        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
            setLocation($tree, $literal.start);
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
            
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
        $tree = new IntLiteral(Integer.parseInt($INT.text));
        setLocation($tree, $INT);
        }
    | fd=FLOAT {
        String text = $fd.text;
    // je voulez traitÃ© le cas des float long 
        if (text.startsWith("0x") || text.startsWith("0X")) { // en hexa
            if(text.contains(".")) // qui contient un virgule
            {
                
                $tree = new FloatLiteral((float) Double.parseDouble(text));
                
            } else {$tree = new FloatLiteral((float) Long.parseLong($fd.text.substring(2), 16));
            }
            
        } else {
            $tree = new FloatLiteral(Float.parseFloat($fd.text));
        }
        
        setLocation($tree, $fd);
        }
    | STRING {
        // on supprime les " au debut et la fin et on remplace les \" par " et \\ par \
            $tree = new StringLiteral($STRING.text.substring(1, $STRING.text.length() - 1).replaceAll("\\\\\"" , "\"").replaceAll("\\\\\\\\", "\\\\"));
            setLocation($tree, $STRING);
        }
    | TRUE {
            $tree = new BooleanLiteral(Boolean.parseBoolean($TRUE.text));
            setLocation($tree, $TRUE);
        }
    | FALSE {
        $tree = new BooleanLiteral(Boolean.parseBoolean($FALSE.text));
        setLocation($tree, $FALSE);
        }
    | THIS {
        $tree = new This(Boolean.parseBoolean($THIS.text));
        setLocation($tree, $THIS);
        }
    | NULL {
        $tree = new Null();
        setLocation($tree, $NULL);
        }
        
    ;

ident returns[AbstractIdentifier tree]
    : IDENT {
        DecacCompiler compiler = super.getDecacCompiler();
        compiler.symbolTable.create($IDENT.text);
        $tree = new Identifier(compiler.symbolTable.getSymbole($IDENT.text));
        setLocation($tree, $IDENT);
       
        }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
@init{
    $tree = new ListDeclClass();
}
    :
      (c1=class_decl {
        assert($c1.tree != null);
        $tree.add($c1.tree);
        }
      )*
    ;
class_decl returns[AbstractDeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
        $tree = new DeclClass($name.tree, $superclass.tree, $class_body.champs ,$class_body.method);
        setLocation($tree, $CLASS);
        }
    ;

class_extension returns[AbstractIdentifier tree]
    : EXTENDS ident {
        $tree = $ident.tree;
        setLocation($tree, $EXTENDS);
        }
    | /* epsilon */ {
        
        DecacCompiler compiler = super.getDecacCompiler();
        $tree = new Identifier(compiler.symbolTable.getSymbole("Object"));
        $tree.setLocation(Location.BUILTIN);
        
        
        }
    ;
class_body returns[ListDeclField champs, ListDeclMethod method]
@init{ 
    $champs = new ListDeclField();
    $method = new ListDeclMethod();
}
    : (m=decl_method {
        
        $method.add($m.tree);
        }
      | decl_field_set[$champs]

      )*
    ;
decl_field_set[ListDeclField l]
    : v=visibility t=type list_decl_field[$v.tree, $t.tree, $l]
      SEMI
      
    ;
visibility returns[Visibility tree]
    : /* epsilon */ {
        $tree = Visibility.PUBLIC;
        }
    | PROTECTED {
        $tree = Visibility.PROTECTED;
        }
    ;
list_decl_field[Visibility vis, AbstractIdentifier typ , ListDeclField l]
    : dv1=decl_field[$vis, $typ]{
        $l.add($dv1.tree);
    }

        (COMMA dv2=decl_field[$vis, $typ]
        {
            $l.add($dv2.tree);
        }
      )*
    ;
decl_field[Visibility vis, AbstractIdentifier typ] returns[AbstractDeclField tree]
    : i=ident {
            NoInitialization init1 = new NoInitialization();
            assert(init1 != null);
            assert($i.tree != null);

            $tree = new DeclField($vis, $typ, $i.tree, init1);
            setLocation($tree,$i.start);
        }
      (EQUALS e=expr {
            Initialization init = new Initialization($e.tree);
            assert(init != null);
            assert($i.tree != null);
            
            $tree = new DeclField($vis, $typ, $i.tree, init);
            assert($tree != null);
            setLocation(init, $EQUALS);
            setLocation($tree,$EQUALS);
        }
      )? {
        }
    ;
decl_method returns[AbstractDeclMethod tree]
@init {

}
    : type ident OPARENT params=list_params CPARENT (block {

        MethodBody body = new MethodBody($block.decls, $block.insts);
        assert(body != null);

        $tree = new DeclMethod($type.tree, $ident.tree, $params.tree, body);
        setLocation(body, $block.start);
        

        }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
        
        StringLiteral string = new StringLiteral($code.text.substring(1, $code.text.length() - 1).replaceAll("\\\\\"" , "\"").replaceAll("\\\\\\\\", "\\\\"));
        MethodAsmBody asmBody = new MethodAsmBody(string);
        assert(asmBody != null);

        $tree = new DeclMethod($type.tree, $ident.tree, $params.tree, asmBody);
        setLocation(asmBody, $ASM);
        }
      ) {
        setLocation($tree, $type.start);
        }
    ;
list_params returns[ListDeclParam tree]
@init{
    $tree = new ListDeclParam();
}
    : (p1=param { 
        $tree.add($p1.tree);
        } (COMMA p2=param {
            $tree.add($p2.tree);
        }
      )*)?
    ;
    
multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;
param returns[DeclParam tree]
    : type ident {
        $tree = new DeclParam($type.tree , $ident.tree );
        setLocation($tree, $type.start);
        }
    ;
